package lesson2.CallableRun;

import java.util.concurrent.*;

public class CallableRun {
    private static void test1() throws ExecutionException, InterruptedException {
        Callable<Integer> callable = new Callable<Integer>() {
            @Override
            public Integer call() throws Exception {
                System.out.println(Thread.currentThread().getName() + ": call");
                return 1;
            }
        };

        FutureTask<Integer> task = new FutureTask<>(callable);
        new Thread(task).start();
        System.out.println(Thread.currentThread().getName() + ": 子线程run,before get()" );
        // FutureTask.get() 会进行阻塞等待，直到子线程执行完毕，并由get方法获取返回值
        System.out.println(Thread.currentThread().getName() + task.get());
        System.out.println(Thread.currentThread().getName() + ": 子线程run,after get()" );
    }

    public static void test2() throws ExecutionException, InterruptedException {
        ExecutorService pool = Executors.newFixedThreadPool(4);
//        ThreadPoolExecutor pool = new ThreadPoolExecutor();
        Future future = pool.submit(new Callable<String>() {
            @Override
            public String call() throws Exception {
                System.out.println(Thread.currentThread().getName() + ": call()");
                return "call finish";
            }
        });
        System.out.println(Thread.currentThread().getName() + ": pool submit ,before get()" );
        System.out.println(Thread.currentThread().getName() + future.get());
    }

    public static void main(String[] args) throws ExecutionException, InterruptedException {
//         test1();
        test2();
    }
}
